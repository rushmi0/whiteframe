<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="notes" pluginVersion="7.0.0">
    <developerToolsConfigurations>
      <developerToolConfiguration developerToolId="notes" id="89052427-2e5b-4767-a7bc-0a67f88b0ab4" name="Workbench">
        <properties>
          <property key="test" type="INPUT" value="kotlin.String|ช่วยแยกโค้ด UI แต่ละส่วนให้เป็นระเบียบ โดยกหารแยกไปเป็นไฟล์ ให้หน่อย&#10;&#10;&#10;&#10;├── MainActivity.kt&#10;└── ui&#10;    └── theme&#10;        ├── Color.kt&#10;        ├── Theme.kt&#10;        └── Type.kt&#10;&#10;3 directories, 4 files&#10;&#10;&#10;&#10;&#10;package com.example.whiteframe&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Remove&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.whiteframe.ui.theme.WhiteFrameTheme&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            WhiteFrameTheme {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScreen() {&#10;    val sheetState = rememberModalBottomSheetState()&#10;    val scope = rememberCoroutineScope()&#10;    val counter = remember { mutableStateOf(0) }&#10;    var showSheet by remember { mutableStateOf(false) }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        MyAlignments()&#10;&#10;        FloatingActionButton(&#10;            onClick = {&#10;                showSheet = true&#10;                scope.launch { sheetState.show() }&#10;            },&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(bottom = 50.dp, end = 20.dp)&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = &quot;Open Bottom Sheet&quot;)&#10;        }&#10;&#10;        if (showSheet) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = {&#10;                    showSheet = false&#10;                },&#10;                sheetState = sheetState,&#10;                shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Counter: ${counter.value}&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.SpaceEvenly,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        IconButton(onClick = {&#10;                            counter.value -= 1&#10;                        }) {&#10;                            Icon(Icons.Default.Remove, contentDescription = &quot;Decrease&quot;)&#10;                        }&#10;                        IconButton(onClick = {&#10;                            counter.value += 1&#10;                        }) {&#10;                            Icon(Icons.Default.Add, contentDescription = &quot;Increase&quot;)&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    Button(onClick = {&#10;                        scope.launch { sheetState.hide() }.invokeOnCompletion {&#10;                            showSheet = false&#10;                        }&#10;                    }) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Close&quot;)&#10;                        Spacer(Modifier.width(8.dp))&#10;                        Text(&quot;Close&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MyAlignments() {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFE0E0E0))&#10;            .padding(top = 35.dp),&#10;        horizontalArrangement = Arrangement.SpaceAround&#10;    ) {&#10;        Text(&#10;            text = &quot;Hello&quot;,&#10;            color = Color.White,&#10;            fontSize = 25.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            fontStyle = FontStyle.Italic,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .background(Color.Red, shape = RoundedCornerShape(7.dp))&#10;                .padding(start = 20.dp, end = 20.dp, top = 5.dp, bottom = 5.dp)&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Kotlin&quot;,&#10;            color = Color.White,&#10;            fontSize = 25.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            fontStyle = FontStyle.Italic,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .background(&#10;                    Color.Green,&#10;                    shape = RoundedCornerShape(&#10;                        topStart = 7.dp,&#10;                        topEnd = 7.dp,&#10;                    )&#10;                )&#10;                .padding(start = 20.dp, end = 20.dp, top = 5.dp, bottom = 5.dp)&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Android&quot;,&#10;            color = Color.White,&#10;            fontSize = 25.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            fontStyle = FontStyle.Italic,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .background(&#10;                    Color.Blue,&#10;                    shape = RoundedCornerShape(&#10;                        bottomStart = 7.dp,&#10;                        bottomEnd = 7.dp&#10;                    )&#10;                )&#10;                .padding(start = 20.dp, end = 20.dp, top = 5.dp, bottom = 5.dp)&#10;        )&#10;    }&#10;}&#10;&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    WhiteFrameTheme {&#10;&#10;        MainScreen()&#10;&#10;    }&#10;}" />
        </properties>
      </developerToolConfiguration>
    </developerToolsConfigurations>
  </component>
</project>